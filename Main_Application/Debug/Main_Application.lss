
Main_Application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000498  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000050c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  0000050c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000053c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001baf  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f2  00000000  00000000  000022c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001085  00000000  00000000  00002cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b0  00000000  00000000  00003d40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000906  00000000  00000000  000040f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000141e  00000000  00000000  000049f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00005e14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	17 01       	movw	r2, r14
  56:	21 01       	movw	r4, r2
  58:	2a 01       	movw	r4, r20
  5a:	33 01       	movw	r6, r6
  5c:	3c 01       	movw	r6, r24
  5e:	45 01       	movw	r8, r10
  60:	4e 01       	movw	r8, r28
  62:	57 01       	movw	r10, r14

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e8 e9       	ldi	r30, 0x98	; 152
  78:	f4 e0       	ldi	r31, 0x04	; 4
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	a0 e6       	ldi	r26, 0x60	; 96
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	a6 36       	cpi	r26, 0x66	; 102
  92:	b2 07       	cpc	r27, r18
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  9a:	0c 94 4a 02 	jmp	0x494	; 0x494 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:
*/
#include <main.h>

int main(void)
{
	LCD_Initialize();
  a2:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_Initialize>
	ADC_Initialize(ADC_AREF, ADC_PRE_128);
  a6:	67 e0       	ldi	r22, 0x07	; 7
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <ADC_Initialize>
  ae:	ff cf       	rjmp	.-2      	; 0xae <main+0xc>

000000b0 <LCD_Enable>:
#include <LCD1602_Private.h>

#if _LCD1602_MODE_ == _LCD1602_4BIT_
void LCD_Enable(void)
{
	DIO_SetPinValue(LCD_Control_PORT, LCD_EN_PIN, LCD_High);
  b0:	41 e0       	ldi	r20, 0x01	; 1
  b2:	63 e0       	ldi	r22, 0x03	; 3
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	8f e9       	ldi	r24, 0x9F	; 159
  bc:	9f e0       	ldi	r25, 0x0F	; 15
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <LCD_Enable+0xe>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <LCD_Enable+0x14>
  c4:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_Control_PORT, LCD_EN_PIN, LCD_Low);
  c6:	40 e0       	ldi	r20, 0x00	; 0
  c8:	63 e0       	ldi	r22, 0x03	; 3
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	0e 94 61 01 	call	0x2c2	; 0x2c2 <DIO_SetPinValue>
  d0:	08 95       	ret

000000d2 <LCD_Send_Command>:
}
void LCD_Send_Command(u8 Command)
{
  d2:	cf 93       	push	r28
  d4:	c8 2f       	mov	r28, r24
	DIO_SetPinValue(LCD_Control_PORT, LCD_RS_PIN, LCD_Low);
  d6:	40 e0       	ldi	r20, 0x00	; 0
  d8:	61 e0       	ldi	r22, 0x01	; 1
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	0e 94 61 01 	call	0x2c2	; 0x2c2 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_Control_PORT, LCD_RW_PIN, LCD_Low);
  e0:	40 e0       	ldi	r20, 0x00	; 0
  e2:	62 e0       	ldi	r22, 0x02	; 2
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_Control_PORT, LCD_EN_PIN, LCD_Low);
  ea:	40 e0       	ldi	r20, 0x00	; 0
  ec:	63 e0       	ldi	r22, 0x03	; 3
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	0e 94 61 01 	call	0x2c2	; 0x2c2 <DIO_SetPinValue>
	DIO_WritePortValue(LCD_Data_PORT, LCD_PIN_D4, LCD_PIN_D7, (Command & 0xF0));
  f4:	2c 2f       	mov	r18, r28
  f6:	20 7f       	andi	r18, 0xF0	; 240
  f8:	47 e0       	ldi	r20, 0x07	; 7
  fa:	64 e0       	ldi	r22, 0x04	; 4
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	0e 94 09 02 	call	0x412	; 0x412 <DIO_WritePortValue>
	LCD_Enable();
 102:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_Enable>
	DIO_WritePortValue(LCD_Data_PORT, LCD_PIN_D4, LCD_PIN_D7, ((Command & 0x0F) << 4));
 106:	80 e1       	ldi	r24, 0x10	; 16
 108:	c8 9f       	mul	r28, r24
 10a:	90 01       	movw	r18, r0
 10c:	11 24       	eor	r1, r1
 10e:	47 e0       	ldi	r20, 0x07	; 7
 110:	64 e0       	ldi	r22, 0x04	; 4
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	0e 94 09 02 	call	0x412	; 0x412 <DIO_WritePortValue>
	LCD_Enable();
 118:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_Enable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	8f e8       	ldi	r24, 0x8F	; 143
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <LCD_Send_Command+0x4e>
 124:	00 c0       	rjmp	.+0      	; 0x126 <LCD_Send_Command+0x54>
 126:	00 00       	nop
	_delay_us(100);
	if(Command == LCD_Command_IncrementCursor || Command == LCD_Command_DisplayLeft)
 128:	c6 30       	cpi	r28, 0x06	; 6
 12a:	11 f0       	breq	.+4      	; 0x130 <LCD_Send_Command+0x5e>
 12c:	c8 31       	cpi	r28, 0x18	; 24
 12e:	11 f4       	brne	.+4      	; 0x134 <LCD_Send_Command+0x62>
		CursorDirection = false;
 130:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <CursorDirection>
	if(Command == LCD_Command_DecrementCursor || Command == LCD_Command_DisplayRight)
 134:	c4 30       	cpi	r28, 0x04	; 4
 136:	11 f0       	breq	.+4      	; 0x13c <LCD_Send_Command+0x6a>
 138:	cc 31       	cpi	r28, 0x1C	; 28
 13a:	19 f4       	brne	.+6      	; 0x142 <LCD_Send_Command+0x70>
		CursorDirection = true;
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <CursorDirection>
}
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <LCD_HomeScreen>:
void LCD_HomeScreen(void)
{
	LCD_Send_Command(0x02);
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_Send_Command>
 14c:	8f ea       	ldi	r24, 0xAF	; 175
 14e:	9d e1       	ldi	r25, 0x1D	; 29
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <LCD_HomeScreen+0xa>
 154:	00 c0       	rjmp	.+0      	; 0x156 <LCD_HomeScreen+0x10>
 156:	00 00       	nop
	_delay_us(1900);
	Character_Counter = 0;
 158:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Character_Counter>
 15c:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Character_Counter+0x1>
 160:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <Character_Counter+0x2>
 164:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <Character_Counter+0x3>
 168:	08 95       	ret

0000016a <LCD_ClearScreen>:
}
void LCD_ClearScreen(void)
{
	LCD_Send_Command(0x01);
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_Send_Command>
	LCD_HomeScreen();
 170:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_HomeScreen>
 174:	8f ea       	ldi	r24, 0xAF	; 175
 176:	9d e1       	ldi	r25, 0x1D	; 29
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <LCD_ClearScreen+0xe>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <LCD_ClearScreen+0x14>
 17e:	00 00       	nop
 180:	08 95       	ret

00000182 <LCD_Initialize>:
	_delay_us(1900);
}
void LCD_Initialize(void)
{
	static bool Initialized = false;
	if(!Initialized)
 182:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 186:	81 11       	cpse	r24, r1
 188:	26 c0       	rjmp	.+76     	; 0x1d6 <LCD_Initialize+0x54>
	{
		DIO_WritePortDirection(LCD_Control_PORT, LCD_RS_PIN, LCD_EN_PIN, LCD_Control_PORT_Output);
 18a:	2e e0       	ldi	r18, 0x0E	; 14
 18c:	43 e0       	ldi	r20, 0x03	; 3
 18e:	61 e0       	ldi	r22, 0x01	; 1
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	0e 94 ce 01 	call	0x39c	; 0x39c <DIO_WritePortDirection>
		DIO_WritePortDirection(LCD_Data_PORT, LCD_PIN_D4, LCD_PIN_D7, LCD_Data_PORT_Output);
 196:	20 ef       	ldi	r18, 0xF0	; 240
 198:	47 e0       	ldi	r20, 0x07	; 7
 19a:	64 e0       	ldi	r22, 0x04	; 4
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	0e 94 ce 01 	call	0x39c	; 0x39c <DIO_WritePortDirection>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a2:	8f e5       	ldi	r24, 0x5F	; 95
 1a4:	9a ee       	ldi	r25, 0xEA	; 234
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <LCD_Initialize+0x24>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <LCD_Initialize+0x2a>
 1ac:	00 00       	nop
		_delay_ms(15);
		LCD_Send_Command(LCD_Command_8BitInitialize);
 1ae:	83 e3       	ldi	r24, 0x33	; 51
 1b0:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_Send_Command>
		LCD_Send_Command(LCD_Command_4BitInitialize);
 1b4:	82 e3       	ldi	r24, 0x32	; 50
 1b6:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_Send_Command>
		LCD_Send_Command(LCD_Command_4Bit2Line);
 1ba:	88 e2       	ldi	r24, 0x28	; 40
 1bc:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_Send_Command>
		LCD_Send_Command(LCD_Command_DisplayOnCursorOn);
 1c0:	8f e0       	ldi	r24, 0x0F	; 15
 1c2:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_Send_Command>
		LCD_Send_Command(LCD_Command_IncrementCursor);
 1c6:	86 e0       	ldi	r24, 0x06	; 6
 1c8:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_Send_Command>
		LCD_ClearScreen();
 1cc:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_ClearScreen>
		Initialized = true;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1d6:	08 95       	ret

000001d8 <ADC_Initialize>:

#include <ADC_Private.h>

void ADC_Initialize(vref Voltage, prescaler Prescale)
{
	Set_Bit(ADCSRA, ADEN);
 1d8:	96 b1       	in	r25, 0x06	; 6
 1da:	90 68       	ori	r25, 0x80	; 128
 1dc:	96 b9       	out	0x06, r25	; 6
	Clear_Bit(ADMUX, ADLAR);
 1de:	97 b1       	in	r25, 0x07	; 7
 1e0:	9f 7d       	andi	r25, 0xDF	; 223
 1e2:	97 b9       	out	0x07, r25	; 7
	switch(Voltage)
 1e4:	81 30       	cpi	r24, 0x01	; 1
 1e6:	59 f0       	breq	.+22     	; 0x1fe <ADC_Initialize+0x26>
 1e8:	18 f0       	brcs	.+6      	; 0x1f0 <ADC_Initialize+0x18>
 1ea:	82 30       	cpi	r24, 0x02	; 2
 1ec:	79 f0       	breq	.+30     	; 0x20c <ADC_Initialize+0x34>
 1ee:	14 c0       	rjmp	.+40     	; 0x218 <ADC_Initialize+0x40>
	{
		case ADC_AREF:
		Clear_Bit(ADMUX, REFS0);
 1f0:	87 b1       	in	r24, 0x07	; 7
 1f2:	8f 7b       	andi	r24, 0xBF	; 191
 1f4:	87 b9       	out	0x07, r24	; 7
		Clear_Bit(ADMUX, REFS1);
 1f6:	87 b1       	in	r24, 0x07	; 7
 1f8:	8f 77       	andi	r24, 0x7F	; 127
 1fa:	87 b9       	out	0x07, r24	; 7
		break;
 1fc:	0d c0       	rjmp	.+26     	; 0x218 <ADC_Initialize+0x40>
		case ADC_AVCC:
		Set_Bit(ADMUX, REFS0);
 1fe:	87 b1       	in	r24, 0x07	; 7
 200:	80 64       	ori	r24, 0x40	; 64
 202:	87 b9       	out	0x07, r24	; 7
		Clear_Bit(ADMUX, REFS1);
 204:	87 b1       	in	r24, 0x07	; 7
 206:	8f 77       	andi	r24, 0x7F	; 127
 208:	87 b9       	out	0x07, r24	; 7
		break;
 20a:	06 c0       	rjmp	.+12     	; 0x218 <ADC_Initialize+0x40>
		case ADC_Internal:
		Set_Bit(ADMUX, REFS0);
 20c:	87 b1       	in	r24, 0x07	; 7
 20e:	80 64       	ori	r24, 0x40	; 64
 210:	87 b9       	out	0x07, r24	; 7
		Set_Bit(ADMUX, REFS1);
 212:	87 b1       	in	r24, 0x07	; 7
 214:	80 68       	ori	r24, 0x80	; 128
 216:	87 b9       	out	0x07, r24	; 7
		break;
		default:
		break;
	}
	switch(Prescale)
 218:	86 2f       	mov	r24, r22
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	88 30       	cpi	r24, 0x08	; 8
 21e:	91 05       	cpc	r25, r1
 220:	08 f0       	brcs	.+2      	; 0x224 <ADC_Initialize+0x4c>
 222:	4e c0       	rjmp	.+156    	; 0x2c0 <ADC_Initialize+0xe8>
 224:	fc 01       	movw	r30, r24
 226:	e6 5d       	subi	r30, 0xD6	; 214
 228:	ff 4f       	sbci	r31, 0xFF	; 255
 22a:	0c 94 44 02 	jmp	0x488	; 0x488 <__tablejump2__>
	{
		case ADC_PRE_0:
		Clear_Bit(ADCSRA, ADPS0);
 22e:	86 b1       	in	r24, 0x06	; 6
 230:	8e 7f       	andi	r24, 0xFE	; 254
 232:	86 b9       	out	0x06, r24	; 6
		Clear_Bit(ADCSRA, ADPS1);
 234:	86 b1       	in	r24, 0x06	; 6
 236:	8d 7f       	andi	r24, 0xFD	; 253
 238:	86 b9       	out	0x06, r24	; 6
		Clear_Bit(ADCSRA, ADPS2);
 23a:	86 b1       	in	r24, 0x06	; 6
 23c:	8b 7f       	andi	r24, 0xFB	; 251
 23e:	86 b9       	out	0x06, r24	; 6
		break;
 240:	08 95       	ret
		case ADC_PRE_2:
		Set_Bit(ADCSRA, ADPS0);
 242:	86 b1       	in	r24, 0x06	; 6
 244:	81 60       	ori	r24, 0x01	; 1
 246:	86 b9       	out	0x06, r24	; 6
		Clear_Bit(ADCSRA, ADPS1);
 248:	86 b1       	in	r24, 0x06	; 6
 24a:	8d 7f       	andi	r24, 0xFD	; 253
 24c:	86 b9       	out	0x06, r24	; 6
		Clear_Bit(ADCSRA, ADPS2);
 24e:	86 b1       	in	r24, 0x06	; 6
 250:	8b 7f       	andi	r24, 0xFB	; 251
 252:	86 b9       	out	0x06, r24	; 6
		case ADC_PRE_4:
		Clear_Bit(ADCSRA, ADPS0);
 254:	86 b1       	in	r24, 0x06	; 6
 256:	8e 7f       	andi	r24, 0xFE	; 254
 258:	86 b9       	out	0x06, r24	; 6
		Set_Bit(ADCSRA, ADPS1);
 25a:	86 b1       	in	r24, 0x06	; 6
 25c:	82 60       	ori	r24, 0x02	; 2
 25e:	86 b9       	out	0x06, r24	; 6
		Clear_Bit(ADCSRA, ADPS2);
 260:	86 b1       	in	r24, 0x06	; 6
 262:	8b 7f       	andi	r24, 0xFB	; 251
 264:	86 b9       	out	0x06, r24	; 6
		case ADC_PRE_8:
		Set_Bit(ADCSRA, ADPS0);
 266:	86 b1       	in	r24, 0x06	; 6
 268:	81 60       	ori	r24, 0x01	; 1
 26a:	86 b9       	out	0x06, r24	; 6
		Set_Bit(ADCSRA, ADPS1);
 26c:	86 b1       	in	r24, 0x06	; 6
 26e:	82 60       	ori	r24, 0x02	; 2
 270:	86 b9       	out	0x06, r24	; 6
		Clear_Bit(ADCSRA, ADPS2);
 272:	86 b1       	in	r24, 0x06	; 6
 274:	8b 7f       	andi	r24, 0xFB	; 251
 276:	86 b9       	out	0x06, r24	; 6
		case ADC_PRE_16:
		Clear_Bit(ADCSRA, ADPS0);
 278:	86 b1       	in	r24, 0x06	; 6
 27a:	8e 7f       	andi	r24, 0xFE	; 254
 27c:	86 b9       	out	0x06, r24	; 6
		Clear_Bit(ADCSRA, ADPS1);
 27e:	86 b1       	in	r24, 0x06	; 6
 280:	8d 7f       	andi	r24, 0xFD	; 253
 282:	86 b9       	out	0x06, r24	; 6
		Set_Bit(ADCSRA, ADPS2);
 284:	86 b1       	in	r24, 0x06	; 6
 286:	84 60       	ori	r24, 0x04	; 4
 288:	86 b9       	out	0x06, r24	; 6
		case ADC_PRE_32:
		Set_Bit(ADCSRA, ADPS0);
 28a:	86 b1       	in	r24, 0x06	; 6
 28c:	81 60       	ori	r24, 0x01	; 1
 28e:	86 b9       	out	0x06, r24	; 6
		Clear_Bit(ADCSRA, ADPS1);
 290:	86 b1       	in	r24, 0x06	; 6
 292:	8d 7f       	andi	r24, 0xFD	; 253
 294:	86 b9       	out	0x06, r24	; 6
		Set_Bit(ADCSRA, ADPS2);
 296:	86 b1       	in	r24, 0x06	; 6
 298:	84 60       	ori	r24, 0x04	; 4
 29a:	86 b9       	out	0x06, r24	; 6
		case ADC_PRE_64:
		Clear_Bit(ADCSRA, ADPS0);
 29c:	86 b1       	in	r24, 0x06	; 6
 29e:	8e 7f       	andi	r24, 0xFE	; 254
 2a0:	86 b9       	out	0x06, r24	; 6
		Set_Bit(ADCSRA, ADPS1);
 2a2:	86 b1       	in	r24, 0x06	; 6
 2a4:	82 60       	ori	r24, 0x02	; 2
 2a6:	86 b9       	out	0x06, r24	; 6
		Set_Bit(ADCSRA, ADPS2);
 2a8:	86 b1       	in	r24, 0x06	; 6
 2aa:	84 60       	ori	r24, 0x04	; 4
 2ac:	86 b9       	out	0x06, r24	; 6
		case ADC_PRE_128:
		Set_Bit(ADCSRA, ADPS0);
 2ae:	86 b1       	in	r24, 0x06	; 6
 2b0:	81 60       	ori	r24, 0x01	; 1
 2b2:	86 b9       	out	0x06, r24	; 6
		Set_Bit(ADCSRA, ADPS1);
 2b4:	86 b1       	in	r24, 0x06	; 6
 2b6:	82 60       	ori	r24, 0x02	; 2
 2b8:	86 b9       	out	0x06, r24	; 6
		Set_Bit(ADCSRA, ADPS2);
 2ba:	86 b1       	in	r24, 0x06	; 6
 2bc:	84 60       	ori	r24, 0x04	; 4
 2be:	86 b9       	out	0x06, r24	; 6
 2c0:	08 95       	ret

000002c2 <DIO_SetPinValue>:
		break;
		case DIO_PORTD:
		if(Status == DIO_Low)
		PORTD = DIO_PORT_Low;
		else
		PORTD = DIO_PORT_High;
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	01 f1       	breq	.+64     	; 0x306 <DIO_SetPinValue+0x44>
 2c6:	30 f0       	brcs	.+12     	; 0x2d4 <DIO_SetPinValue+0x12>
 2c8:	82 30       	cpi	r24, 0x02	; 2
 2ca:	b1 f1       	breq	.+108    	; 0x338 <DIO_SetPinValue+0x76>
 2cc:	83 30       	cpi	r24, 0x03	; 3
 2ce:	09 f4       	brne	.+2      	; 0x2d2 <DIO_SetPinValue+0x10>
 2d0:	4c c0       	rjmp	.+152    	; 0x36a <DIO_SetPinValue+0xa8>
 2d2:	08 95       	ret
 2d4:	41 11       	cpse	r20, r1
 2d6:	0c c0       	rjmp	.+24     	; 0x2f0 <DIO_SetPinValue+0x2e>
 2d8:	2b b3       	in	r18, 0x1b	; 27
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_SetPinValue+0x22>
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	6a 95       	dec	r22
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_SetPinValue+0x1e>
 2e8:	80 95       	com	r24
 2ea:	82 23       	and	r24, r18
 2ec:	8b bb       	out	0x1b, r24	; 27
 2ee:	08 95       	ret
 2f0:	2b b3       	in	r18, 0x1b	; 27
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_SetPinValue+0x3a>
 2f8:	88 0f       	add	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	6a 95       	dec	r22
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_SetPinValue+0x36>
 300:	82 2b       	or	r24, r18
 302:	8b bb       	out	0x1b, r24	; 27
 304:	08 95       	ret
 306:	41 11       	cpse	r20, r1
 308:	0c c0       	rjmp	.+24     	; 0x322 <DIO_SetPinValue+0x60>
 30a:	28 b3       	in	r18, 0x18	; 24
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_SetPinValue+0x54>
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	6a 95       	dec	r22
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_SetPinValue+0x50>
 31a:	80 95       	com	r24
 31c:	82 23       	and	r24, r18
 31e:	88 bb       	out	0x18, r24	; 24
 320:	08 95       	ret
 322:	28 b3       	in	r18, 0x18	; 24
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	02 c0       	rjmp	.+4      	; 0x32e <DIO_SetPinValue+0x6c>
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	6a 95       	dec	r22
 330:	e2 f7       	brpl	.-8      	; 0x32a <DIO_SetPinValue+0x68>
 332:	82 2b       	or	r24, r18
 334:	88 bb       	out	0x18, r24	; 24
 336:	08 95       	ret
 338:	41 11       	cpse	r20, r1
 33a:	0c c0       	rjmp	.+24     	; 0x354 <DIO_SetPinValue+0x92>
 33c:	25 b3       	in	r18, 0x15	; 21
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_SetPinValue+0x86>
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	6a 95       	dec	r22
 34a:	e2 f7       	brpl	.-8      	; 0x344 <DIO_SetPinValue+0x82>
 34c:	80 95       	com	r24
 34e:	82 23       	and	r24, r18
 350:	85 bb       	out	0x15, r24	; 21
 352:	08 95       	ret
 354:	25 b3       	in	r18, 0x15	; 21
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_SetPinValue+0x9e>
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	6a 95       	dec	r22
 362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_SetPinValue+0x9a>
 364:	82 2b       	or	r24, r18
 366:	85 bb       	out	0x15, r24	; 21
 368:	08 95       	ret
 36a:	41 11       	cpse	r20, r1
 36c:	0c c0       	rjmp	.+24     	; 0x386 <DIO_SetPinValue+0xc4>
 36e:	22 b3       	in	r18, 0x12	; 18
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_SetPinValue+0xb8>
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	6a 95       	dec	r22
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_SetPinValue+0xb4>
 37e:	80 95       	com	r24
 380:	82 23       	and	r24, r18
 382:	82 bb       	out	0x12, r24	; 18
 384:	08 95       	ret
 386:	22 b3       	in	r18, 0x12	; 18
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_SetPinValue+0xd0>
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	6a 95       	dec	r22
 394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_SetPinValue+0xcc>
 396:	82 2b       	or	r24, r18
 398:	82 bb       	out	0x12, r24	; 18
 39a:	08 95       	ret

0000039c <DIO_WritePortDirection>:
		break;
	}
}
void DIO_WritePortDirection(port Port, pin StartPin, pin EndPin, u8 Data)
{
	u8 Mask = ((1 << (EndPin - StartPin + 1)) - 1) << StartPin, PlaceHolder;
 39c:	e4 2f       	mov	r30, r20
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	e6 1b       	sub	r30, r22
 3a2:	f1 09       	sbc	r31, r1
 3a4:	31 96       	adiw	r30, 0x01	; 1
 3a6:	41 e0       	ldi	r20, 0x01	; 1
 3a8:	50 e0       	ldi	r21, 0x00	; 0
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <DIO_WritePortDirection+0x14>
 3ac:	44 0f       	add	r20, r20
 3ae:	55 1f       	adc	r21, r21
 3b0:	ea 95       	dec	r30
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <DIO_WritePortDirection+0x10>
 3b4:	41 50       	subi	r20, 0x01	; 1
 3b6:	51 09       	sbc	r21, r1
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <DIO_WritePortDirection+0x22>
 3ba:	44 0f       	add	r20, r20
 3bc:	55 1f       	adc	r21, r21
 3be:	6a 95       	dec	r22
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <DIO_WritePortDirection+0x1e>
	switch(Port)
 3c2:	81 30       	cpi	r24, 0x01	; 1
 3c4:	71 f0       	breq	.+28     	; 0x3e2 <DIO_WritePortDirection+0x46>
 3c6:	28 f0       	brcs	.+10     	; 0x3d2 <DIO_WritePortDirection+0x36>
 3c8:	82 30       	cpi	r24, 0x02	; 2
 3ca:	99 f0       	breq	.+38     	; 0x3f2 <DIO_WritePortDirection+0x56>
 3cc:	83 30       	cpi	r24, 0x03	; 3
 3ce:	c9 f0       	breq	.+50     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3d0:	08 95       	ret
	{
		case DIO_PORTA:
		PlaceHolder = DDRA;
 3d2:	8a b3       	in	r24, 0x1a	; 26
		PlaceHolder &= ~Mask;
 3d4:	94 2f       	mov	r25, r20
 3d6:	90 95       	com	r25
 3d8:	89 23       	and	r24, r25
		PlaceHolder |= Data & Mask;
 3da:	42 23       	and	r20, r18
 3dc:	48 2b       	or	r20, r24
		DDRA = PlaceHolder;
 3de:	4a bb       	out	0x1a, r20	; 26
		break;
 3e0:	08 95       	ret
		case DIO_PORTB:
		PlaceHolder = DDRB;
 3e2:	87 b3       	in	r24, 0x17	; 23
		PlaceHolder &= ~Mask;
 3e4:	94 2f       	mov	r25, r20
 3e6:	90 95       	com	r25
 3e8:	89 23       	and	r24, r25
		PlaceHolder |= Data & Mask;
 3ea:	42 23       	and	r20, r18
 3ec:	48 2b       	or	r20, r24
		DDRB = PlaceHolder;
 3ee:	47 bb       	out	0x17, r20	; 23
		break;
 3f0:	08 95       	ret
		case DIO_PORTC:
		PlaceHolder = DDRC;
 3f2:	84 b3       	in	r24, 0x14	; 20
		PlaceHolder &= ~Mask;
 3f4:	94 2f       	mov	r25, r20
 3f6:	90 95       	com	r25
 3f8:	89 23       	and	r24, r25
		PlaceHolder |= Data & Mask;
 3fa:	42 23       	and	r20, r18
 3fc:	48 2b       	or	r20, r24
		DDRC = PlaceHolder;
 3fe:	44 bb       	out	0x14, r20	; 20
		break;
 400:	08 95       	ret
		case DIO_PORTD:
		PlaceHolder = DDRD;
 402:	81 b3       	in	r24, 0x11	; 17
		PlaceHolder &= ~Mask;
 404:	94 2f       	mov	r25, r20
 406:	90 95       	com	r25
 408:	89 23       	and	r24, r25
		PlaceHolder |= Data & Mask;
 40a:	42 23       	and	r20, r18
 40c:	48 2b       	or	r20, r24
		DDRD = PlaceHolder;
 40e:	41 bb       	out	0x11, r20	; 17
 410:	08 95       	ret

00000412 <DIO_WritePortValue>:
		break;
	}
}
void DIO_WritePortValue(port Port, pin StartPin, pin EndPin, u8 Data)
{
	u8 Mask = ((1 << (EndPin - StartPin + 1)) - 1) << StartPin, PlaceHolder;
 412:	e4 2f       	mov	r30, r20
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	e6 1b       	sub	r30, r22
 418:	f1 09       	sbc	r31, r1
 41a:	31 96       	adiw	r30, 0x01	; 1
 41c:	41 e0       	ldi	r20, 0x01	; 1
 41e:	50 e0       	ldi	r21, 0x00	; 0
 420:	02 c0       	rjmp	.+4      	; 0x426 <DIO_WritePortValue+0x14>
 422:	44 0f       	add	r20, r20
 424:	55 1f       	adc	r21, r21
 426:	ea 95       	dec	r30
 428:	e2 f7       	brpl	.-8      	; 0x422 <DIO_WritePortValue+0x10>
 42a:	41 50       	subi	r20, 0x01	; 1
 42c:	51 09       	sbc	r21, r1
 42e:	02 c0       	rjmp	.+4      	; 0x434 <DIO_WritePortValue+0x22>
 430:	44 0f       	add	r20, r20
 432:	55 1f       	adc	r21, r21
 434:	6a 95       	dec	r22
 436:	e2 f7       	brpl	.-8      	; 0x430 <DIO_WritePortValue+0x1e>
	switch(Port)
 438:	81 30       	cpi	r24, 0x01	; 1
 43a:	71 f0       	breq	.+28     	; 0x458 <DIO_WritePortValue+0x46>
 43c:	28 f0       	brcs	.+10     	; 0x448 <DIO_WritePortValue+0x36>
 43e:	82 30       	cpi	r24, 0x02	; 2
 440:	99 f0       	breq	.+38     	; 0x468 <DIO_WritePortValue+0x56>
 442:	83 30       	cpi	r24, 0x03	; 3
 444:	c9 f0       	breq	.+50     	; 0x478 <DIO_WritePortValue+0x66>
 446:	08 95       	ret
	{
		case DIO_PORTA:
		PlaceHolder = PORTA;
 448:	8b b3       	in	r24, 0x1b	; 27
		PlaceHolder &= ~Mask;
 44a:	94 2f       	mov	r25, r20
 44c:	90 95       	com	r25
 44e:	89 23       	and	r24, r25
		PlaceHolder |= Data & Mask;
 450:	42 23       	and	r20, r18
 452:	48 2b       	or	r20, r24
		PORTA = PlaceHolder;
 454:	4b bb       	out	0x1b, r20	; 27
		break;
 456:	08 95       	ret
		case DIO_PORTB:
		PlaceHolder = PORTB;
 458:	88 b3       	in	r24, 0x18	; 24
		PlaceHolder &= ~Mask;
 45a:	94 2f       	mov	r25, r20
 45c:	90 95       	com	r25
 45e:	89 23       	and	r24, r25
		PlaceHolder |= Data & Mask;
 460:	42 23       	and	r20, r18
 462:	48 2b       	or	r20, r24
		PORTB = PlaceHolder;
 464:	48 bb       	out	0x18, r20	; 24
		break;
 466:	08 95       	ret
		case DIO_PORTC:
		PlaceHolder = PORTC;
 468:	85 b3       	in	r24, 0x15	; 21
		PlaceHolder &= ~Mask;
 46a:	94 2f       	mov	r25, r20
 46c:	90 95       	com	r25
 46e:	89 23       	and	r24, r25
		PlaceHolder |= Data & Mask;
 470:	42 23       	and	r20, r18
 472:	48 2b       	or	r20, r24
		PORTC = PlaceHolder;
 474:	45 bb       	out	0x15, r20	; 21
		break;
 476:	08 95       	ret
		case DIO_PORTD:
		PlaceHolder = PORTD;
 478:	82 b3       	in	r24, 0x12	; 18
		PlaceHolder &= ~Mask;
 47a:	94 2f       	mov	r25, r20
 47c:	90 95       	com	r25
 47e:	89 23       	and	r24, r25
		PlaceHolder |= Data & Mask;
 480:	42 23       	and	r20, r18
 482:	48 2b       	or	r20, r24
		PORTD = PlaceHolder;
 484:	42 bb       	out	0x12, r20	; 18
 486:	08 95       	ret

00000488 <__tablejump2__>:
 488:	ee 0f       	add	r30, r30
 48a:	ff 1f       	adc	r31, r31
 48c:	05 90       	lpm	r0, Z+
 48e:	f4 91       	lpm	r31, Z
 490:	e0 2d       	mov	r30, r0
 492:	09 94       	ijmp

00000494 <_exit>:
 494:	f8 94       	cli

00000496 <__stop_program>:
 496:	ff cf       	rjmp	.-2      	; 0x496 <__stop_program>
