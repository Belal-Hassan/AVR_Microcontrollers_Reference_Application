
Main_Application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000038e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003e2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000414  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012d1  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000814  00000000  00000000  00001851  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a45  00000000  00000000  00002065  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d4  00000000  00000000  00002aac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005c3  00000000  00000000  00002c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000072a  00000000  00000000  00003243  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  0000396d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 c5 01 	jmp	0x38a	; 0x38a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include <main.h>

int main(void)
{
	LED0_Init();
  6c:	0e 94 b5 00 	call	0x16a	; 0x16a <LED0_Init>
	LED1_Init();
  70:	0e 94 c7 00 	call	0x18e	; 0x18e <LED1_Init>
	LED2_Init();
  74:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LED2_Init>
	while (1)
	{
		LED0_ON();
  78:	0e 94 bb 00 	call	0x176	; 0x176 <LED0_ON>
		LED1_OFF();
  7c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LED1_OFF>
		LED2_OFF();
  80:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LED2_OFF>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	2f ef       	ldi	r18, 0xFF	; 255
  86:	89 e6       	ldi	r24, 0x69	; 105
  88:	98 e1       	ldi	r25, 0x18	; 24
  8a:	21 50       	subi	r18, 0x01	; 1
  8c:	80 40       	sbci	r24, 0x00	; 0
  8e:	90 40       	sbci	r25, 0x00	; 0
  90:	e1 f7       	brne	.-8      	; 0x8a <main+0x1e>
  92:	00 c0       	rjmp	.+0      	; 0x94 <main+0x28>
  94:	00 00       	nop
		_delay_ms(500);
		LED0_OFF();
  96:	0e 94 c1 00 	call	0x182	; 0x182 <LED0_OFF>
		LED1_ON();
  9a:	0e 94 cd 00 	call	0x19a	; 0x19a <LED1_ON>
		LED2_OFF();
  9e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LED2_OFF>
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	89 e6       	ldi	r24, 0x69	; 105
  a6:	98 e1       	ldi	r25, 0x18	; 24
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x3c>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x46>
  b2:	00 00       	nop
		_delay_ms(500);
		LED0_ON();
  b4:	0e 94 bb 00 	call	0x176	; 0x176 <LED0_ON>
		LED1_ON();
  b8:	0e 94 cd 00 	call	0x19a	; 0x19a <LED1_ON>
		LED2_OFF();
  bc:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LED2_OFF>
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	89 e6       	ldi	r24, 0x69	; 105
  c4:	98 e1       	ldi	r25, 0x18	; 24
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x5a>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x64>
  d0:	00 00       	nop
		_delay_ms(500);
		LED0_OFF();
  d2:	0e 94 c1 00 	call	0x182	; 0x182 <LED0_OFF>
		LED1_OFF();
  d6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LED1_OFF>
		LED2_ON();
  da:	0e 94 df 00 	call	0x1be	; 0x1be <LED2_ON>
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	89 e6       	ldi	r24, 0x69	; 105
  e2:	98 e1       	ldi	r25, 0x18	; 24
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x78>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x82>
  ee:	00 00       	nop
		_delay_ms(500);
		LED0_ON();
  f0:	0e 94 bb 00 	call	0x176	; 0x176 <LED0_ON>
		LED1_OFF();
  f4:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LED1_OFF>
		LED2_ON();
  f8:	0e 94 df 00 	call	0x1be	; 0x1be <LED2_ON>
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	89 e6       	ldi	r24, 0x69	; 105
 100:	98 e1       	ldi	r25, 0x18	; 24
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <main+0x96>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0xa0>
 10c:	00 00       	nop
		_delay_ms(500);
		LED0_OFF();
 10e:	0e 94 c1 00 	call	0x182	; 0x182 <LED0_OFF>
		LED1_ON();
 112:	0e 94 cd 00 	call	0x19a	; 0x19a <LED1_ON>
		LED2_ON();
 116:	0e 94 df 00 	call	0x1be	; 0x1be <LED2_ON>
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	89 e6       	ldi	r24, 0x69	; 105
 11e:	98 e1       	ldi	r25, 0x18	; 24
 120:	21 50       	subi	r18, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0xb4>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0xbe>
 12a:	00 00       	nop
		_delay_ms(500);
		LED0_ON();
 12c:	0e 94 bb 00 	call	0x176	; 0x176 <LED0_ON>
		LED1_ON();
 130:	0e 94 cd 00 	call	0x19a	; 0x19a <LED1_ON>
		LED2_ON();
 134:	0e 94 df 00 	call	0x1be	; 0x1be <LED2_ON>
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	89 e6       	ldi	r24, 0x69	; 105
 13c:	98 e1       	ldi	r25, 0x18	; 24
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <main+0xd2>
 146:	00 c0       	rjmp	.+0      	; 0x148 <main+0xdc>
 148:	00 00       	nop
		_delay_ms(500);
		LED0_OFF();
 14a:	0e 94 c1 00 	call	0x182	; 0x182 <LED0_OFF>
		LED1_OFF();
 14e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LED1_OFF>
		LED2_OFF();
 152:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LED2_OFF>
 156:	2f ef       	ldi	r18, 0xFF	; 255
 158:	89 e6       	ldi	r24, 0x69	; 105
 15a:	98 e1       	ldi	r25, 0x18	; 24
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	80 40       	sbci	r24, 0x00	; 0
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0xf0>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0xfa>
 166:	00 00       	nop
 168:	87 cf       	rjmp	.-242    	; 0x78 <main+0xc>

0000016a <LED0_Init>:
 */ 
#include <LED0_Private.h>

void LED0_Init(void)
{
	DIO_SetPinDirection(LED0_PORT, LED0, LED0_Output);
 16a:	41 e0       	ldi	r20, 0x01	; 1
 16c:	62 e0       	ldi	r22, 0x02	; 2
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_SetPinDirection>
 174:	08 95       	ret

00000176 <LED0_ON>:
}
void LED0_ON(void)
{
	DIO_SetPinValue(LED0_PORT, LED0, LED0_High);
 176:	41 e0       	ldi	r20, 0x01	; 1
 178:	62 e0       	ldi	r22, 0x02	; 2
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DIO_SetPinValue>
 180:	08 95       	ret

00000182 <LED0_OFF>:
}
void LED0_OFF(void)
{
	DIO_SetPinValue(LED0_PORT, LED0, LED0_Low);
 182:	40 e0       	ldi	r20, 0x00	; 0
 184:	62 e0       	ldi	r22, 0x02	; 2
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DIO_SetPinValue>
 18c:	08 95       	ret

0000018e <LED1_Init>:
 */ 
#include <LED1_Private.h>

void LED1_Init(void)
{
	DIO_SetPinDirection(LED1_PORT, LED1, LED1_Output);
 18e:	41 e0       	ldi	r20, 0x01	; 1
 190:	62 e0       	ldi	r22, 0x02	; 2
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_SetPinDirection>
 198:	08 95       	ret

0000019a <LED1_ON>:
}
void LED1_ON(void)
{
	DIO_SetPinValue(LED1_PORT, LED1, LED1_High);
 19a:	41 e0       	ldi	r20, 0x01	; 1
 19c:	62 e0       	ldi	r22, 0x02	; 2
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DIO_SetPinValue>
 1a4:	08 95       	ret

000001a6 <LED1_OFF>:
}
void LED1_OFF(void)
{
	DIO_SetPinValue(LED1_PORT, LED1, LED1_Low);
 1a6:	40 e0       	ldi	r20, 0x00	; 0
 1a8:	62 e0       	ldi	r22, 0x02	; 2
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DIO_SetPinValue>
 1b0:	08 95       	ret

000001b2 <LED2_Init>:
 */ 
#include <LED2_Private.h>

void LED2_Init(void)
{
	DIO_SetPinDirection(LED2_PORT, LED2, LED2_Output);
 1b2:	41 e0       	ldi	r20, 0x01	; 1
 1b4:	62 e0       	ldi	r22, 0x02	; 2
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_SetPinDirection>
 1bc:	08 95       	ret

000001be <LED2_ON>:
}
void LED2_ON(void)
{
	DIO_SetPinValue(LED2_PORT, LED2, LED2_High);
 1be:	41 e0       	ldi	r20, 0x01	; 1
 1c0:	62 e0       	ldi	r22, 0x02	; 2
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DIO_SetPinValue>
 1c8:	08 95       	ret

000001ca <LED2_OFF>:
}
void LED2_OFF(void)
{
	DIO_SetPinValue(LED2_PORT, LED2, LED2_Low);
 1ca:	40 e0       	ldi	r20, 0x00	; 0
 1cc:	62 e0       	ldi	r22, 0x02	; 2
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DIO_SetPinValue>
 1d4:	08 95       	ret

000001d6 <DIO_SetPinDirection>:
#include <DIO_Private.h>

/*------------------------------PINS------------------------------*/
void DIO_SetPinDirection(port Port, pin Pin, state State)
{
	switch(Port)
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	01 f1       	breq	.+64     	; 0x21a <DIO_SetPinDirection+0x44>
 1da:	30 f0       	brcs	.+12     	; 0x1e8 <DIO_SetPinDirection+0x12>
 1dc:	82 30       	cpi	r24, 0x02	; 2
 1de:	b1 f1       	breq	.+108    	; 0x24c <DIO_SetPinDirection+0x76>
 1e0:	83 30       	cpi	r24, 0x03	; 3
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <DIO_SetPinDirection+0x10>
 1e4:	4c c0       	rjmp	.+152    	; 0x27e <DIO_SetPinDirection+0xa8>
 1e6:	08 95       	ret
	{
		case DIO_PORTA:
		if(State == DIO_Input)
 1e8:	41 11       	cpse	r20, r1
 1ea:	0c c0       	rjmp	.+24     	; 0x204 <DIO_SetPinDirection+0x2e>
		Clear_Bit(DDRA, Pin);
 1ec:	2a b3       	in	r18, 0x1a	; 26
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <DIO_SetPinDirection+0x22>
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	6a 95       	dec	r22
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <DIO_SetPinDirection+0x1e>
 1fc:	80 95       	com	r24
 1fe:	82 23       	and	r24, r18
 200:	8a bb       	out	0x1a, r24	; 26
 202:	08 95       	ret
		else
		Set_Bit(DDRA, Pin);
 204:	2a b3       	in	r18, 0x1a	; 26
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_SetPinDirection+0x3a>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_SetPinDirection+0x36>
 214:	82 2b       	or	r24, r18
 216:	8a bb       	out	0x1a, r24	; 26
 218:	08 95       	ret
		break;
		case DIO_PORTB:
		if(State == DIO_Input)
 21a:	41 11       	cpse	r20, r1
 21c:	0c c0       	rjmp	.+24     	; 0x236 <DIO_SetPinDirection+0x60>
		Clear_Bit(DDRB, Pin);
 21e:	27 b3       	in	r18, 0x17	; 23
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_SetPinDirection+0x54>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_SetPinDirection+0x50>
 22e:	80 95       	com	r24
 230:	82 23       	and	r24, r18
 232:	87 bb       	out	0x17, r24	; 23
 234:	08 95       	ret
		else
		Set_Bit(DDRB, Pin);
 236:	27 b3       	in	r18, 0x17	; 23
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_SetPinDirection+0x6c>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_SetPinDirection+0x68>
 246:	82 2b       	or	r24, r18
 248:	87 bb       	out	0x17, r24	; 23
 24a:	08 95       	ret
		break;
		case DIO_PORTC:
		if(State == DIO_Input)
 24c:	41 11       	cpse	r20, r1
 24e:	0c c0       	rjmp	.+24     	; 0x268 <DIO_SetPinDirection+0x92>
		Clear_Bit(DDRC, Pin);
 250:	24 b3       	in	r18, 0x14	; 20
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_SetPinDirection+0x86>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_SetPinDirection+0x82>
 260:	80 95       	com	r24
 262:	82 23       	and	r24, r18
 264:	84 bb       	out	0x14, r24	; 20
 266:	08 95       	ret
		else
		Set_Bit(DDRC, Pin);
 268:	24 b3       	in	r18, 0x14	; 20
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_SetPinDirection+0x9e>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_SetPinDirection+0x9a>
 278:	82 2b       	or	r24, r18
 27a:	84 bb       	out	0x14, r24	; 20
 27c:	08 95       	ret
		break;
		case DIO_PORTD:
		if(State == DIO_Input)
 27e:	41 11       	cpse	r20, r1
 280:	0c c0       	rjmp	.+24     	; 0x29a <DIO_SetPinDirection+0xc4>
		Clear_Bit(DDRD, Pin);
 282:	21 b3       	in	r18, 0x11	; 17
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_SetPinDirection+0xb8>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_SetPinDirection+0xb4>
 292:	80 95       	com	r24
 294:	82 23       	and	r24, r18
 296:	81 bb       	out	0x11, r24	; 17
 298:	08 95       	ret
		else
		Set_Bit(DDRD, Pin);
 29a:	21 b3       	in	r18, 0x11	; 17
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <DIO_SetPinDirection+0xd0>
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	6a 95       	dec	r22
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <DIO_SetPinDirection+0xcc>
 2aa:	82 2b       	or	r24, r18
 2ac:	81 bb       	out	0x11, r24	; 17
 2ae:	08 95       	ret

000002b0 <DIO_SetPinValue>:
		break;
	}
}
void DIO_SetPinValue(port Port, pin Pin, status Status)
{
	switch(Port)
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	01 f1       	breq	.+64     	; 0x2f4 <DIO_SetPinValue+0x44>
 2b4:	30 f0       	brcs	.+12     	; 0x2c2 <DIO_SetPinValue+0x12>
 2b6:	82 30       	cpi	r24, 0x02	; 2
 2b8:	b1 f1       	breq	.+108    	; 0x326 <DIO_SetPinValue+0x76>
 2ba:	83 30       	cpi	r24, 0x03	; 3
 2bc:	09 f4       	brne	.+2      	; 0x2c0 <DIO_SetPinValue+0x10>
 2be:	4c c0       	rjmp	.+152    	; 0x358 <DIO_SetPinValue+0xa8>
 2c0:	08 95       	ret
	{
		case DIO_PORTA:
		if(Status == DIO_Low) Clear_Bit(PORTA, Pin);
 2c2:	41 11       	cpse	r20, r1
 2c4:	0c c0       	rjmp	.+24     	; 0x2de <DIO_SetPinValue+0x2e>
 2c6:	2b b3       	in	r18, 0x1b	; 27
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_SetPinValue+0x22>
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	6a 95       	dec	r22
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_SetPinValue+0x1e>
 2d6:	80 95       	com	r24
 2d8:	82 23       	and	r24, r18
 2da:	8b bb       	out	0x1b, r24	; 27
 2dc:	08 95       	ret
		else
		Set_Bit(PORTA, Pin);
 2de:	2b b3       	in	r18, 0x1b	; 27
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_SetPinValue+0x3a>
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	6a 95       	dec	r22
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_SetPinValue+0x36>
 2ee:	82 2b       	or	r24, r18
 2f0:	8b bb       	out	0x1b, r24	; 27
 2f2:	08 95       	ret
		break;
		case DIO_PORTB:
		if(Status == DIO_Low)
 2f4:	41 11       	cpse	r20, r1
 2f6:	0c c0       	rjmp	.+24     	; 0x310 <DIO_SetPinValue+0x60>
		Clear_Bit(PORTB, Pin);
 2f8:	28 b3       	in	r18, 0x18	; 24
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_SetPinValue+0x54>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	6a 95       	dec	r22
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_SetPinValue+0x50>
 308:	80 95       	com	r24
 30a:	82 23       	and	r24, r18
 30c:	88 bb       	out	0x18, r24	; 24
 30e:	08 95       	ret
		else
		Set_Bit(PORTB, Pin);
 310:	28 b3       	in	r18, 0x18	; 24
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_SetPinValue+0x6c>
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	6a 95       	dec	r22
 31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_SetPinValue+0x68>
 320:	82 2b       	or	r24, r18
 322:	88 bb       	out	0x18, r24	; 24
 324:	08 95       	ret
		break;
		case DIO_PORTC:
		if(Status == DIO_Low)
 326:	41 11       	cpse	r20, r1
 328:	0c c0       	rjmp	.+24     	; 0x342 <DIO_SetPinValue+0x92>
		Clear_Bit(PORTC, Pin);
 32a:	25 b3       	in	r18, 0x15	; 21
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_SetPinValue+0x86>
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	6a 95       	dec	r22
 338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_SetPinValue+0x82>
 33a:	80 95       	com	r24
 33c:	82 23       	and	r24, r18
 33e:	85 bb       	out	0x15, r24	; 21
 340:	08 95       	ret
		else
		Set_Bit(PORTC, Pin);
 342:	25 b3       	in	r18, 0x15	; 21
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_SetPinValue+0x9e>
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	6a 95       	dec	r22
 350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_SetPinValue+0x9a>
 352:	82 2b       	or	r24, r18
 354:	85 bb       	out	0x15, r24	; 21
 356:	08 95       	ret
		break;
		case DIO_PORTD:
		if(Status == DIO_Low)
 358:	41 11       	cpse	r20, r1
 35a:	0c c0       	rjmp	.+24     	; 0x374 <DIO_SetPinValue+0xc4>
		Clear_Bit(PORTD, Pin);
 35c:	22 b3       	in	r18, 0x12	; 18
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_SetPinValue+0xb8>
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	6a 95       	dec	r22
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_SetPinValue+0xb4>
 36c:	80 95       	com	r24
 36e:	82 23       	and	r24, r18
 370:	82 bb       	out	0x12, r24	; 18
 372:	08 95       	ret
		else
		Set_Bit(PORTD, Pin);
 374:	22 b3       	in	r18, 0x12	; 18
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_SetPinValue+0xd0>
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	6a 95       	dec	r22
 382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_SetPinValue+0xcc>
 384:	82 2b       	or	r24, r18
 386:	82 bb       	out	0x12, r24	; 18
 388:	08 95       	ret

0000038a <_exit>:
 38a:	f8 94       	cli

0000038c <__stop_program>:
 38c:	ff cf       	rjmp	.-2      	; 0x38c <__stop_program>
